version: '3.8'

services:
  core:
    container_name: core-service
    image: core-service
    build:
      context: ./core
    env_file:
      - ./core/.env
    volumes:
      - ./core:/app
    # command: npm run migrate:dev
    depends_on:
      - discovery_service
      - user-postgres-server
      - core-postgres-server
    expose:
      - ${CORE_SERVICE_PORT}
    ports:
      - ${CORE_SERVICE_PORT}:${CORE_SERVICE_PORT}
    restart: always

  auth:
    container_name: auth-service
    image: auth-service
    build:
      context: ./auth
    env_file:
      - ./auth/.env
    volumes:
      - ./auth:/app
    # command: npm run migrate:dev
    depends_on:
      - discovery_service
      - user-postgres-server
    expose:
      - ${AUTH_SERVICE_PORT}
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    restart: always

  core-postgres-server:
    container_name: core-postgres-server
    image: postgres
    env_file:
    - ./core/.env
    environment:
      POSTGRES_DB: ${CORE_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${CORE_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CORE_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - core_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5433:5432
    restart: unless-stopped

  user-postgres-server:
    container_name: user-postgres-server
    image: postgres
    env_file:
    - ./auth/.env
    environment:
      POSTGRES_DB: ${AUTH_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - user_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5434:5432
    restart: unless-stopped

  gateway:
    container_name: gateway
    image: gateway-service
    build:
      context: ./gateway
    expose:
      - 5555
    ports:
      - 5555:5555
    restart: unless-stopped

  discovery_service:
    container_name: discovery
    image: discovery-service
    build:
      context: ./discovery
    depends_on:
      - gateway
    expose:
      - 6666
    ports:
      - 6666:6666
    restart: unless-stopped


  redis-master:
    container_name: redis-master
    image: redislabs/rejson
    expose:
      - 6379
    ports:
      - 6379:6379
      
  redis-slave:
    container_name: redis-slave
    image: redislabs/rejson
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --slaveof redis-master 6379
    links:
      - redis-master

  sentinel:
    container_name: sentinel
    image: redislabs/rejson
    command: >
      bash -c "echo 'port 26379' > sentinel.conf &&
      echo 'dir /tmp' >> sentinel.conf &&
      echo 'sentinel monitor redis-master redis-master 6379 2' >> sentinel.conf &&
      echo 'sentinel down-after-milliseconds redis-master 5000' >> sentinel.conf &&
      echo 'sentinel parallel-syncs redis-master 1' >> sentinel.conf &&
      echo 'sentinel failover-timeout redis-master 5000' >> sentinel.conf &&
      echo 'sentinel resolve-hostnames yes' >> sentinel.conf &&
      
      cat sentinel.conf &&
      redis-server sentinel.conf --sentinel"
    links:
      - redis-master
      - redis-slave

  py-cache:
    container_name: py-cache
    image: py-cache
    build:
      context: ./cache
    depends_on:
      - redis-master
    expose:
      - 6380
    ports:
      - 6380:6380  

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

  prometheus:
    image: prom/prometheus:v2.20.1
    container_name: prometheus
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    expose:
      - 9090

  grafana:
    image: grafana/grafana:8.2.6
    container_name: grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 6789:3000
    expose:
      - 3000

volumes:
  core_postgres:
  user_postgres:
  prometheus_data: {}
  grafana_data: {}
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  elastic:
    driver: bridge
