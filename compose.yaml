version: '3.8'

services:
  core01:
    image: core
    container_name: core01
    build:
      context: ./core
    env_file:
      - ./core/.env
    environment:
      CORE_SERVICE_PORT: ${CORE_SERVICE_PORT_1}
      CORE_SERVICE_CONTAINER_NAME: "core01"
    volumes:
      - ./core:/app
    depends_on:
      - discovery
      - user-postgres
      - core-postgres
    expose:
      - ${CORE_SERVICE_PORT_1}
    ports:
      - ${CORE_SERVICE_PORT_1}:${CORE_SERVICE_PORT_1}
    restart: unless-stopped

  core02:
    image: core
    container_name: core02
    build:
      context: ./core
    env_file:
      - ./core/.env
    environment:
      CORE_SERVICE_PORT: ${CORE_SERVICE_PORT_2}
      CORE_SERVICE_CONTAINER_NAME: "core02"
    volumes:
      - ./core:/app
    depends_on:
      - discovery
      - user-postgres
      - core-postgres
    expose:
      - ${CORE_SERVICE_PORT_2}
    ports:
      - ${CORE_SERVICE_PORT_2}:${CORE_SERVICE_PORT_2}
    restart: unless-stopped

  auth:
    image: auth
    container_name: auth
    build:
      context: ./auth
    env_file:
      - ./auth/.env
    volumes:
      - ./auth:/app
    depends_on:
      - discovery
      - user-postgres
    expose:
      - ${AUTH_SERVICE_PORT}
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    restart: unless-stopped

  core-postgres:
    container_name: core-postgres
    image: postgres
    env_file:
    - ./core/.env
    environment:
      POSTGRES_DB: ${CORE_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${CORE_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CORE_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - core_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5433:5432
    restart: unless-stopped

  user-postgres:
    container_name: user-postgres
    image: postgres
    env_file:
    - ./auth/.env
    environment:
      POSTGRES_DB: ${AUTH_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - user_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5434:5432
    restart: unless-stopped

  mongodb1:
    # container_name: mongodb1
    hostname: mongodb1
    image: mongo
    expose:
      - 27017
    ports:
      - 24333:27017
    # volumes:
    #   - .mongodb:/data
    restart: unless-stopped
    command: mongod --replSet mongo-set-1

  mongodb2:
    # container_name: mongodb2
    hostname: mongodb2
    image: mongo
    expose:
      - 27017
    ports:
      - 24334:27017
    # volumes:
    #   - .mongodb:/data
    restart: unless-stopped
    command: mongod --replSet mongo-set-1

  mongoinit:
    # container_name: mongoinit
    image: mongo
    # this container will exit after executing the command
    restart: "no"
    depends_on:
      - mongodb1
      - mongodb2
    command: >
      mongo --host mongodb1:27017 --eval 
      '
      db = (new Mongo("localhost:27017")).getDB("user");
      config = {
      "_id" : "mongo-set-1",
      "members" : [
        {
          "_id" : 0,
          "host" : "mongodb1:27017"
        },
        {
          "_id" : 1,
          "host" : "mongodb2:27017"
        }
      ]
      };
      rs.initiate(config);
      ' 

  gateway:
    image: gateway
    container_name: gateway
    build:
      context: ./gateway
    expose:
      - 5555
    ports:
      - 5555:5555
    restart: unless-stopped

  discovery:
    image: discovery
    container_name: discovery
    build:
      context: ./discovery
    depends_on:
      - gateway
    expose:
      - 6666
    ports:
      - 6666:6666
    restart: unless-stopped

  redis-master:
    container_name: redis-master
    image: redislabs/rejson
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --requirepass redis
    expose:
      - 6379
    ports:
      - 6379:6379
    restart: unless-stopped
      
  redis-slave:
    container_name: redis-slave
    image: redislabs/rejson
    command: redis-server --loadmodule /usr/lib/redis/modules/rejson.so --slaveof redis-master 6379 --masterauth redis
    links:
      - redis-master
    restart: unless-stopped

  sentinel:
    container_name: sentinel
    image: redislabs/rejson
    command: >
      bash -c "echo 'port 26379' > sentinel.conf &&
      echo 'dir /tmp' >> sentinel.conf &&
      echo 'sentinel monitor redis-master redis-master 6379 1' >> sentinel.conf &&
      echo 'sentinel auth-pass redis-master redis' >> sentinel.conf &&
      echo 'sentinel down-after-milliseconds redis-master 5000' >> sentinel.conf &&
      echo 'sentinel parallel-syncs redis-master 1' >> sentinel.conf &&
      echo 'sentinel failover-timeout redis-master 5000' >> sentinel.conf &&
      echo 'sentinel resolve-hostnames yes' >> sentinel.conf &&
      
      cat sentinel.conf &&
      redis-server sentinel.conf --sentinel"
    links:
      - redis-master
      - redis-slave
    expose:
      - 26379
    ports:
      - 26379:26379
    restart: unless-stopped

  py-cache:
    image: py-cache
    container_name: py-cache
    build:
      context: ./cache
    depends_on:
      - redis-master
      - sentinel
    expose:
      - 6380
    ports:
      - 6380:6380 
    restart: unless-stopped

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic
    restart: on-failure

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic
    restart: on-failure

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic
    restart: on-failure

  prometheus:
    image: prometheus
    container_name: prometheus
    image: prom/prometheus:v2.20.1
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus_data:/prometheus
    ports:
      - 9090:9090
    expose:
      - 9090
    restart: unless-stopped

  grafana:
    image: grafana
    container_name: grafana
    image: grafana/grafana:8.2.6
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    ports:
      - 6789:3000
    expose:
      - 3000
    restart: unless-stopped

volumes:
  core_postgres:
  user_postgres:
  prometheus_data: 
  grafana_data:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  elastic:
    driver: bridge
