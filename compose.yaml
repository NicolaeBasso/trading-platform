version: '3.8'

services:
  core:
    container_name: core-service
    image: core-service
    build:
      context: ./trading-platform-core
      dockerfile: Dockerfile
    env_file:
      - ./trading-platform-core/.env
    volumes:
      - ./trading-platform-core:/app
    # command: npm run migrate:dev
    depends_on:
      - user-postgres-server
      - core-postgres-server
    expose:
      - ${CORE_SERVICE_PORT}
    ports:
      - ${CORE_SERVICE_PORT}:${CORE_SERVICE_PORT}
    restart: always

  auth:
    container_name: auth-service
    image: auth-service
    build:
      context: ./trading-platform-auth
      dockerfile: Dockerfile
    env_file:
      - ./trading-platform-auth/.env
    volumes:
      - ./trading-platform-auth:/app
    # command: npm run migrate:dev
    depends_on:
      - user-postgres-server
    expose:
      - ${AUTH_SERVICE_PORT}
    ports:
      - ${AUTH_SERVICE_PORT}:${AUTH_SERVICE_PORT}
    restart: always

  core-postgres-server:
    container_name: core-postgres-server
    image: postgres
    env_file:
    - ./trading-platform-core/.env
    environment:
      POSTGRES_DB: ${CORE_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${CORE_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${CORE_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - core_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5433:5432
    restart: unless-stopped

  user-postgres-server:
    container_name: user-postgres-server
    image: postgres
    env_file:
    - ./trading-platform-auth/.env
    environment:
      POSTGRES_DB: ${AUTH_SERVICE_POSTGRES_DB}
      POSTGRES_USER: ${AUTH_SERVICE_POSTGRES_USER}
      POSTGRES_PASSWORD: ${AUTH_SERVICE_POSTGRES_PASSWORD}
      PGDATA: /data/postgres
    volumes:
      - user_postgres:/data/postgres
    expose:
      - 5432
    ports:
      - 5434:5432
    restart: unless-stopped

  gateway:
    container_name: gateway
    # image: waffle4everyone/gateway
    image: gateway-service
    build:
      # context: ./flask-gw
      dockerfile: gateway.dockerfile
    expose:
      - 5555
    ports:
      - 5555:5555
    restart: unless-stopped

  discovery_service:
    container_name: discovery
    # image: waffle4everyone/discovery
    image: discovery-service
    build:
      context: ./fkask-sd
      dockerfile: discovery.dockerfile
    expose:
      - 6666
    ports:
      - 6666:6666
    restart: unless-stopped


  sentinel:
    image: redis:6.2.0-alpine
    command: redis-server /etc/redis/sentinel.conf --sentinel
    environment:
      - SENTINEL_DOWN_AFTER=5000
      - SENTINEL_FAILOVER=3000
      - SENTINEL_QUORUM=2
      - SENTINEL_MASTER_NAME=mymaster
      - SENTINEL_MASTER_IP=redis-cache
      - SENTINEL_MASTER_PORT=6379
      - SENTINEL_SLAVE_IP=redis-slave
      - SENTINEL_SLAVE_PORT=6379
    ports:
      - "26379:26379"

  redis-cache:
    container_name: redis-cache
    image: redislabs/rejson:latest
    expose:
      - 6379
    ports:
      - 6379:6379
    environment:
      - MASTER=true
      - SERVICE_NAME=master

  redis-slave:
    container_name: redis-slave
    image: redis:6.2.0-alpine
    environment:
      - SERVICE_NAME=slave




  py-cache:
    container_name: py-cache
    # image: waffle4everyone/redis-cache:latest
    image: py-cache-service
    build:
      # context: ./flask-cache
      dockerfile: py-cache.dockerfile
    depends_on:
      - redis-cache
    expose:
      - 6380
    ports:
      - 6380:6380  

  es01:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es01
    environment:
      - node.name=es01
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es02,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data01:/usr/share/elasticsearch/data
    ports:
      - 9200:9200
    networks:
      - elastic

  es02:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es02
    environment:
      - node.name=es02
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es03
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data02:/usr/share/elasticsearch/data
    networks:
      - elastic

  es03:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.9.1
    container_name: es03
    environment:
      - node.name=es03
      - cluster.name=es-docker-cluster
      - discovery.seed_hosts=es01,es02
      - cluster.initial_master_nodes=es01,es02,es03
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - data03:/usr/share/elasticsearch/data
    networks:
      - elastic

volumes:
  core_postgres:
  user_postgres:
  data01:
    driver: local
  data02:
    driver: local
  data03:
    driver: local

networks:
  elastic:
    driver: bridge
